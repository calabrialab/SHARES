interval="confidence",
level = 0.95))
plot(h.idx ~ TimePoint, data = yX_mrk_vID, cex = 2,
main = mrk, cex.main = 2,
pch = 19, cex.axis = 2, cex.lab = 2, col = alpha("red", .5),
xlim = range(yX$TimePoint),
ylim = range(yX_mrk$h.idx, conf_interval_all[,2:3]), xlab = "t", ylab = "h idx.")
with(newdat, lines(x = TimePoint, y = pred, col = "red", lwd = 3))
lines(newdat$TimePoint, conf_interval[,2], col="red", lty=2, lwd = 3)
lines(newdat$TimePoint, conf_interval[,3], col="red", lty=2, lwd = 3)
####
yX_mrk_vID <- yX[which(yX$CellMarker == mrk & yX$VectorID == "PGK"),]
newdat = data.frame(TimePoint = seq(min(yX_mrk_vID$TimePoint), max(yX_mrk_vID$TimePoint), length.out = 100),
CellMarker = mrk,
VectorID = "PGK")
newdat$pred = exp(predict(fit, newdata = newdat))
conf_interval <- exp(predict(fit,
newdata=newdat,
interval="confidence",
level = 0.95))
points(h.idx ~ TimePoint, data = yX_mrk_vID, cex = 2,
pch = 17, col = alpha("blue", .5))
with(newdat, lines(x = TimePoint, y = pred, col = "blue", lwd = 3))
lines(newdat$TimePoint, conf_interval[,2], col="blue", lty=2, lwd = 3)
lines(newdat$TimePoint, conf_interval[,3], col="blue", lty=2, lwd = 3)
}
dev.off()
## Plot legends:
pdf(file = paste(currFigPath, "vectorLegends.pdf", sep = ""), width = 16, height = 4)
par(mar = c(5,5,2,2), mfrow = c(2,2))
plot.new()
legend(x = "center", legend = c("PGK", "LTR"), col = c("blue", "red"), pch = c(17, 20), cex = 4, lwd = 7, lty = 1, horiz = T)
dev.off()
cor.test
par(xpd=NA)
x
y
par(xpd=NA)
plot(rnorm(100))
di <- dev.size("in")
x <- grconvertX(c(0, di[1]), from="in", to="user")
y <- grconvertY(c(0, di[2]), from="in", to="user")
fig <- par("fig")
x <- x[1] + (x[2] - x[1]) * fig[1:2]
y <- y[1] + (y[2] - y[1]) * fig[3:4]
txt <- "A"
x <- x[1] + strwidth(txt, cex=3) / 2
y <- y[2] - strheight(txt, cex=3) / 2
text(x, y, txt, cex=3)
fig_label <- function(text, region="figure", pos="topleft", cex=NULL, ...) {
region <- match.arg(region, c("figure", "plot", "device"))
pos <- match.arg(pos, c("topleft", "top", "topright",
"left", "center", "right",
"bottomleft", "bottom", "bottomright"))
if(region %in% c("figure", "device")) {
ds <- dev.size("in")
# xy coordinates of device corners in user coordinates
x <- grconvertX(c(0, ds[1]), from="in", to="user")
y <- grconvertY(c(0, ds[2]), from="in", to="user")
# fragment of the device we use to plot
if(region == "figure") {
# account for the fragment of the device that
# the figure is using
fig <- par("fig")
dx <- (x[2] - x[1])
dy <- (y[2] - y[1])
x <- x[1] + dx * fig[1:2]
y <- y[1] + dy * fig[3:4]
}
}
# much simpler if in plotting region
if(region == "plot") {
u <- par("usr")
x <- u[1:2]
y <- u[3:4]
}
sw <- strwidth(text, cex=cex) * 60/100
sh <- strheight(text, cex=cex) * 60/100
x1 <- switch(pos,
topleft     =x[1] + sw,
left        =x[1] + sw,
bottomleft  =x[1] + sw,
top         =(x[1] + x[2])/2,
center      =(x[1] + x[2])/2,
bottom      =(x[1] + x[2])/2,
topright    =x[2] - sw,
right       =x[2] - sw,
bottomright =x[2] - sw)
y1 <- switch(pos,
topleft     =y[2] - sh,
top         =y[2] - sh,
topright    =y[2] - sh,
left        =(y[1] + y[2])/2,
center      =(y[1] + y[2])/2,
right       =(y[1] + y[2])/2,
bottomleft  =y[1] + sh,
bottom      =y[1] + sh,
bottomright =y[1] + sh)
old.par <- par(xpd=NA)
on.exit(par(old.par))
text(x1, y1, text, cex=cex, ...)
return(invisible(c(x,y)))
}
dev.off()
dev.off()
plot(rnorm(100))
fig_label <- function(text, region="figure", pos="topleft", cex=NULL, ...) {
region <- match.arg(region, c("figure", "plot", "device"))
pos <- match.arg(pos, c("topleft", "top", "topright",
"left", "center", "right",
"bottomleft", "bottom", "bottomright"))
if(region %in% c("figure", "device")) {
ds <- dev.size("in")
# xy coordinates of device corners in user coordinates
x <- grconvertX(c(0, ds[1]), from="in", to="user")
y <- grconvertY(c(0, ds[2]), from="in", to="user")
# fragment of the device we use to plot
if(region == "figure") {
# account for the fragment of the device that
# the figure is using
fig <- par("fig")
dx <- (x[2] - x[1])
dy <- (y[2] - y[1])
x <- x[1] + dx * fig[1:2]
y <- y[1] + dy * fig[3:4]
}
}
# much simpler if in plotting region
if(region == "plot") {
u <- par("usr")
x <- u[1:2]
y <- u[3:4]
}
sw <- strwidth(text, cex=cex) * 60/100
sh <- strheight(text, cex=cex) * 60/100
x1 <- switch(pos,
topleft     =x[1] + sw,
left        =x[1] + sw,
bottomleft  =x[1] + sw,
top         =(x[1] + x[2])/2,
center      =(x[1] + x[2])/2,
bottom      =(x[1] + x[2])/2,
topright    =x[2] - sw,
right       =x[2] - sw,
bottomright =x[2] - sw)
y1 <- switch(pos,
topleft     =y[2] - sh,
top         =y[2] - sh,
topright    =y[2] - sh,
left        =(y[1] + y[2])/2,
center      =(y[1] + y[2])/2,
right       =(y[1] + y[2])/2,
bottomleft  =y[1] + sh,
bottom      =y[1] + sh,
bottomright =y[1] + sh)
old.par <- par(xpd=NA)
on.exit(par(old.par))
text(x1, y1, text, cex=cex, ...)
return(invisible(c(x,y)))
}
fig_label("A", region="figure", pos="topleft")
fig_label("A", region="figure", pos="topleft", cex = 2)
fig_label("A", region="figure", pos="topleft", cex = 3)
par(mar = c(5,5,2,2), mfrow = c(2,2))
plot(yX$DNAngUsed, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "DNA", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("A", region="figure", pos="topleft", cex = 3)
plot(yX$VCN, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "VCN", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("A", region="figure", pos="topleft", cex = 3)
par(mar = c(5,5,2,2), mfrow = c(2,2))
plot(yX$DNAngUsed, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "DNA", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("A", region="figure", pos="topleft", cex = 3)
plot(yX$VCN, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "VCN", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("B", region="figure", pos="topleft", cex = 3)
plot(yX$N.mice.pool, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "pool size", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("C", region="figure", pos="topleft", cex = 3)
plot(yX$seqDepth, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "seq. depth", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("D", region="figure", pos="topleft", cex = 3)
par(mar = c(5,5,2,2), mfrow = c(1,1))
barplot(res.FMA$probs, ylab = "posterior probability", xlab = "model",
cex.axis = 2, cex.lab = 2, col = "black", font = 2, cex.names = 2,
names.arg = 1:15)
fig_label("A", region="figure", pos="topleft", cex = 3)
par(mar = c(5,5,2,2), mfrow = c(1,1))
barplot(res.FMA$varProbs, ylab = "posterior probability", xlab = "variable",
cex.axis = 2, cex.lab = 2, col = "black", font = 2, cex.names = 2,
names.arg = names(res.FMA$varProbs))
fig_label("B", region="figure", pos="topleft", cex = 3)
par(mar = c(5,5,2,2), mfrow = c(2,2))
plot(yX$DNAngUsed, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "DNA", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("a", region="figure", pos="topleft", cex = 3)
plot(yX$VCN, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "VCN", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("b", region="figure", pos="topleft", cex = 3)
plot(yX$N.mice.pool, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "pool size", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("c", region="figure", pos="topleft", cex = 3)
plot(yX$seqDepth, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "seq. depth", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("d", region="figure", pos="topleft", cex = 3)
fig_label("d", region="figure", pos="topleft", cex = 3, font = 2)
par(mar = c(5,5,2,2), mfrow = c(2,2))
plot(yX$DNAngUsed, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "DNA", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("a", region="figure", pos="topleft", cex = 3, font = 2))
fig_label("a", region="figure", pos="topleft", cex = 3, font = 2)
par(mar = c(5,5,2,2), mfrow = c(2,2))
plot(yX$DNAngUsed, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "DNA", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("a", region="figure", pos="topleft", cex = 3, font = 2)
plot(yX$VCN, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "VCN", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("b", region="figure", pos="topleft", cex = 3, font = 2)
plot(yX$N.mice.pool, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "pool size", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("c", region="figure", pos="topleft", cex = 3, font = 2)
plot(yX$seqDepth, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "seq. depth", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("d", region="figure", pos="topleft", cex = 3, font = 2)
mrk
par(mar = c(5,5,2,2), mfrow = c(2,2))
xLim <- range(yX[, "TimePoint"])
yLim <- range(yX[, "h.idx.res"])
vecMrk <- which(vecMrkComb[,2] == mrk)[1]
yX_vecMrk <- yX[which(yX$VectorID == vecMrkComb[vecMrk,1] & yX$CellMarker == vecMrkComb[vecMrk,2]),]
x <- yX_vecMrk$TimePoint
y.pred <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)])
q.t <- qt(p = 1 - .05/2, df = ncol(AF.mats$AT) - sum(AF.mats$CC.mnt %*% AF.mats$AT %*% tail(b_MLE, -length(b_MLE_cfd)) == 0))
y.pred.sd <- apply(matrix(1:nrow(AF.mats$H.pred)), 1, function(r){
sqrt(res.FMA$s2_MLE * as.numeric((AF.mats$H.pred[r,]%*%AF.mats$AT) %*% solve(t(AF.mats$H.pred%*%AF.mats$AT)%*%(AF.mats$H.pred%*%AF.mats$AT)) %*% t(AF.mats$H.pred[r,]%*%AF.mats$AT))) * q.t
})[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)]
y.pred.sd.minus <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)] - y.pred.sd)
y.pred.sd.plus <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)] + y.pred.sd)
plot(yX_vecMrk$TimePoint, yX_vecMrk$h.idx.res, xlim = xLim, ylim = yLim,
pch = 19, xlab = "t", ylab = "h idx.", cex.axis = 2, cex.lab = 2, # pch = pchPCR[yX_vecMrk$PCRMethod]
main = mrk, cex.main = 2, col = alpha("red", .5), cex = 2)
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred, lwd = 3, col = "red")
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred.sd.minus, lwd = 3, col = "red", lty = 2)
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred.sd.plus, lwd = 3, col = "red", lty = 2)
vecMrk <- which(vecMrkComb[,2] == mrk)[2]
yX_vecMrk <- yX[which(yX$VectorID == vecMrkComb[vecMrk,1] & yX$CellMarker == vecMrkComb[vecMrk,2]),]
x <- yX_vecMrk$TimePoint
y.pred <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept", "af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)])
y.pred.sd <- apply(matrix(1:nrow(AF.mats$H.pred)), 1, function(r){
sqrt(res.FMA$s2_MLE * as.numeric((AF.mats$H.pred[r,]%*%AF.mats$AT) %*% solve(t(AF.mats$H.pred%*%AF.mats$AT)%*%(AF.mats$H.pred%*%AF.mats$AT)) %*% t(AF.mats$H.pred[r,]%*%AF.mats$AT))) * q.t
})[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)]
y.pred.sd.minus <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)] - y.pred.sd)
y.pred.sd.plus <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)] + y.pred.sd)
points(yX_vecMrk$TimePoint, yX_vecMrk$h.idx.res,
pch = 17, col = alpha("blue", .5), cex = 2)
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred, lwd = 3, col = "blue")
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred.sd.minus, lwd = 3, col = "blue", lty = 2)
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred.sd.plus, lwd = 3, col = "blue", lty = 2)
mrk_lab <- c("a", "b", "c", "d")
names(mrk_lab) <- as.vector(unique(yX$CellMarker))
par(mar = c(5,5,2,2), mfrow = c(2,2))
for (mrk in as.vector(unique(yX$CellMarker))) {
xLim <- range(yX[, "TimePoint"])
yLim <- range(yX[, "h.idx.res"])
vecMrk <- which(vecMrkComb[,2] == mrk)[1]
yX_vecMrk <- yX[which(yX$VectorID == vecMrkComb[vecMrk,1] & yX$CellMarker == vecMrkComb[vecMrk,2]),]
x <- yX_vecMrk$TimePoint
y.pred <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)])
q.t <- qt(p = 1 - .05/2, df = ncol(AF.mats$AT) - sum(AF.mats$CC.mnt %*% AF.mats$AT %*% tail(b_MLE, -length(b_MLE_cfd)) == 0))
y.pred.sd <- apply(matrix(1:nrow(AF.mats$H.pred)), 1, function(r){
sqrt(res.FMA$s2_MLE * as.numeric((AF.mats$H.pred[r,]%*%AF.mats$AT) %*% solve(t(AF.mats$H.pred%*%AF.mats$AT)%*%(AF.mats$H.pred%*%AF.mats$AT)) %*% t(AF.mats$H.pred[r,]%*%AF.mats$AT))) * q.t
})[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)]
y.pred.sd.minus <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)] - y.pred.sd)
y.pred.sd.plus <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)] + y.pred.sd)
plot(yX_vecMrk$TimePoint, yX_vecMrk$h.idx.res, xlim = xLim, ylim = yLim,
pch = 19, xlab = "t", ylab = "h idx.", cex.axis = 2, cex.lab = 2, # pch = pchPCR[yX_vecMrk$PCRMethod]
main = mrk, cex.main = 2, col = alpha("red", .5), cex = 2)
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred, lwd = 3, col = "red")
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred.sd.minus, lwd = 3, col = "red", lty = 2)
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred.sd.plus, lwd = 3, col = "red", lty = 2)
vecMrk <- which(vecMrkComb[,2] == mrk)[2]
yX_vecMrk <- yX[which(yX$VectorID == vecMrkComb[vecMrk,1] & yX$CellMarker == vecMrkComb[vecMrk,2]),]
x <- yX_vecMrk$TimePoint
y.pred <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept", "af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)])
y.pred.sd <- apply(matrix(1:nrow(AF.mats$H.pred)), 1, function(r){
sqrt(res.FMA$s2_MLE * as.numeric((AF.mats$H.pred[r,]%*%AF.mats$AT) %*% solve(t(AF.mats$H.pred%*%AF.mats$AT)%*%(AF.mats$H.pred%*%AF.mats$AT)) %*% t(AF.mats$H.pred[r,]%*%AF.mats$AT))) * q.t
})[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)]
y.pred.sd.minus <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)] - y.pred.sd)
y.pred.sd.plus <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)] + y.pred.sd)
points(yX_vecMrk$TimePoint, yX_vecMrk$h.idx.res,
pch = 17, col = alpha("blue", .5), cex = 2)
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred, lwd = 3, col = "blue")
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred.sd.minus, lwd = 3, col = "blue", lty = 2)
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred.sd.plus, lwd = 3, col = "blue", lty = 2)
fig_label(mrk_lab, region="figure", pos="topleft", cex = 3, font = 2)
}
fig_label(mrk_lab[mrk], region="figure", pos="topleft", cex = 3, font = 2)
par(mar = c(5,5,2,2), mfrow = c(2,2))
for (mrk in as.vector(unique(yX$CellMarker))) {
xLim <- range(yX[, "TimePoint"])
yLim <- range(yX[, "h.idx.res"])
vecMrk <- which(vecMrkComb[,2] == mrk)[1]
yX_vecMrk <- yX[which(yX$VectorID == vecMrkComb[vecMrk,1] & yX$CellMarker == vecMrkComb[vecMrk,2]),]
x <- yX_vecMrk$TimePoint
y.pred <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)])
q.t <- qt(p = 1 - .05/2, df = ncol(AF.mats$AT) - sum(AF.mats$CC.mnt %*% AF.mats$AT %*% tail(b_MLE, -length(b_MLE_cfd)) == 0))
y.pred.sd <- apply(matrix(1:nrow(AF.mats$H.pred)), 1, function(r){
sqrt(res.FMA$s2_MLE * as.numeric((AF.mats$H.pred[r,]%*%AF.mats$AT) %*% solve(t(AF.mats$H.pred%*%AF.mats$AT)%*%(AF.mats$H.pred%*%AF.mats$AT)) %*% t(AF.mats$H.pred[r,]%*%AF.mats$AT))) * q.t
})[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)]
y.pred.sd.minus <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)] - y.pred.sd)
y.pred.sd.plus <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)] + y.pred.sd)
plot(yX_vecMrk$TimePoint, yX_vecMrk$h.idx.res, xlim = xLim, ylim = yLim,
pch = 19, xlab = "t", ylab = "h idx.", cex.axis = 2, cex.lab = 2, # pch = pchPCR[yX_vecMrk$PCRMethod]
main = mrk, cex.main = 2, col = alpha("red", .5), cex = 2)
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred, lwd = 3, col = "red")
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred.sd.minus, lwd = 3, col = "red", lty = 2)
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred.sd.plus, lwd = 3, col = "red", lty = 2)
vecMrk <- which(vecMrkComb[,2] == mrk)[2]
yX_vecMrk <- yX[which(yX$VectorID == vecMrkComb[vecMrk,1] & yX$CellMarker == vecMrkComb[vecMrk,2]),]
x <- yX_vecMrk$TimePoint
y.pred <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept", "af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)])
y.pred.sd <- apply(matrix(1:nrow(AF.mats$H.pred)), 1, function(r){
sqrt(res.FMA$s2_MLE * as.numeric((AF.mats$H.pred[r,]%*%AF.mats$AT) %*% solve(t(AF.mats$H.pred%*%AF.mats$AT)%*%(AF.mats$H.pred%*%AF.mats$AT)) %*% t(AF.mats$H.pred[r,]%*%AF.mats$AT))) * q.t
})[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)]
y.pred.sd.minus <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)] - y.pred.sd)
y.pred.sd.plus <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)] + y.pred.sd)
points(yX_vecMrk$TimePoint, yX_vecMrk$h.idx.res,
pch = 17, col = alpha("blue", .5), cex = 2)
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred, lwd = 3, col = "blue")
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred.sd.minus, lwd = 3, col = "blue", lty = 2)
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred.sd.plus, lwd = 3, col = "blue", lty = 2)
fig_label(mrk_lab[mrk], region="figure", pos="topleft", cex = 3, font = 2)
}
par(mar = c(5,5,2,2), mfrow = c(2,2))
for (mrk in unique(yX$CellMarker)) {
yX_mrk <- yX[which(yX$CellMarker == mrk),]
yX_mrk_vID <- yX[which(yX$CellMarker == mrk & yX$VectorID == "LV.SF.LTR"),]
newdat = data.frame(TimePoint = seq(min(yX_mrk_vID$TimePoint), max(yX_mrk_vID$TimePoint), length.out = 100),
CellMarker = mrk,
VectorID = "LV.SF.LTR")
newdat$pred = exp(predict(fit, newdata = newdat))
conf_interval <- exp(predict(fit,
newdata=newdat,
interval="confidence",
level = 0.95))
plot(h.idx ~ TimePoint, data = yX_mrk_vID, cex = 2,
main = mrk, cex.main = 2,
pch = 19, cex.axis = 2, cex.lab = 2, col = alpha("red", .5),
xlim = range(yX$TimePoint),
ylim = range(yX_mrk$h.idx, conf_interval_all[,2:3]), xlab = "t", ylab = "h idx.")
with(newdat, lines(x = TimePoint, y = pred, col = "red", lwd = 3))
lines(newdat$TimePoint, conf_interval[,2], col="red", lty=2, lwd = 3)
lines(newdat$TimePoint, conf_interval[,3], col="red", lty=2, lwd = 3)
####
yX_mrk_vID <- yX[which(yX$CellMarker == mrk & yX$VectorID == "PGK"),]
newdat = data.frame(TimePoint = seq(min(yX_mrk_vID$TimePoint), max(yX_mrk_vID$TimePoint), length.out = 100),
CellMarker = mrk,
VectorID = "PGK")
newdat$pred = exp(predict(fit, newdata = newdat))
conf_interval <- exp(predict(fit,
newdata=newdat,
interval="confidence",
level = 0.95))
points(h.idx ~ TimePoint, data = yX_mrk_vID, cex = 2,
pch = 17, col = alpha("blue", .5))
with(newdat, lines(x = TimePoint, y = pred, col = "blue", lwd = 3))
lines(newdat$TimePoint, conf_interval[,2], col="blue", lty=2, lwd = 3)
lines(newdat$TimePoint, conf_interval[,3], col="blue", lty=2, lwd = 3)
fig_label(mrk_lab[mrk], region="figure", pos="topleft", cex = 3, font = 2)
}
pdf(file = paste(currFigPath, "h_confounders.pdf", sep = ""), width = 12, height = 8)
par(mar = c(5,5,2,2), mfrow = c(2,2))
plot(yX$DNAngUsed, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "DNA", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("a", region="figure", pos="topleft", cex = 3, font = 2)
plot(yX$VCN, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "VCN", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("b", region="figure", pos="topleft", cex = 3, font = 2)
plot(yX$N.mice.pool, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "pool size", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("c", region="figure", pos="topleft", cex = 3, font = 2)
plot(yX$seqDepth, yX$h.idx, cex.axis = 2, cex.lab = 2, xlab = "seq. depth", ylab = "h.idx", pch = 20, cex = 3, col = alpha("black", .5))
fig_label("d", region="figure", pos="topleft", cex = 3, font = 2)
dev.off()
pdf(file = paste(currFigPath, "frequentistPosterior.pdf", sep = ""), width = 7, height = 5)
par(mar = c(5,5,2,2), mfrow = c(1,1))
barplot(res.FMA$probs, ylab = "posterior probability", xlab = "model",
cex.axis = 2, cex.lab = 2, col = "black", font = 2, cex.names = 2,
names.arg = 1:15)
fig_label("a", region="figure", pos="topleft", cex = 3, font = 2)
dev.off()
pdf(file = paste(currFigPath, "frequentistPosterior_VarProbs.pdf", sep = ""), width = 7, height = 5)
par(mar = c(5,5,2,2), mfrow = c(1,1))
barplot(res.FMA$varProbs, ylab = "posterior probability", xlab = "variable",
cex.axis = 2, cex.lab = 2, col = "black", font = 2, cex.names = 2,
names.arg = names(res.FMA$varProbs))
fig_label("b", region="figure", pos="topleft", cex = 3, font = 2)
dev.off()
#################
## Fitting SCS ##
#################
##
mrk_lab <- c("a", "b", "c", "d")
names(mrk_lab) <- as.vector(unique(yX$CellMarker))
pdf(file = paste(currFigPath, "rescaledFitted_FMA_smoothing.pdf", sep = ""), width = 12, height = 8)
par(mar = c(5,5,2,2), mfrow = c(2,2))
for (mrk in as.vector(unique(yX$CellMarker))) {
xLim <- range(yX[, "TimePoint"])
yLim <- range(yX[, "h.idx.res"])
vecMrk <- which(vecMrkComb[,2] == mrk)[1]
yX_vecMrk <- yX[which(yX$VectorID == vecMrkComb[vecMrk,1] & yX$CellMarker == vecMrkComb[vecMrk,2]),]
x <- yX_vecMrk$TimePoint
y.pred <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)])
q.t <- qt(p = 1 - .05/2, df = ncol(AF.mats$AT) - sum(AF.mats$CC.mnt %*% AF.mats$AT %*% tail(b_MLE, -length(b_MLE_cfd)) == 0))
y.pred.sd <- apply(matrix(1:nrow(AF.mats$H.pred)), 1, function(r){
sqrt(res.FMA$s2_MLE * as.numeric((AF.mats$H.pred[r,]%*%AF.mats$AT) %*% solve(t(AF.mats$H.pred%*%AF.mats$AT)%*%(AF.mats$H.pred%*%AF.mats$AT)) %*% t(AF.mats$H.pred[r,]%*%AF.mats$AT))) * q.t
})[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)]
y.pred.sd.minus <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)] - y.pred.sd)
y.pred.sd.plus <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)] + y.pred.sd)
plot(yX_vecMrk$TimePoint, yX_vecMrk$h.idx.res, xlim = xLim, ylim = yLim,
pch = 19, xlab = "t", ylab = "h idx.", cex.axis = 2, cex.lab = 2, # pch = pchPCR[yX_vecMrk$PCRMethod]
main = mrk, cex.main = 2, col = alpha("red", .5), cex = 2)
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred, lwd = 3, col = "red")
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred.sd.minus, lwd = 3, col = "red", lty = 2)
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred.sd.plus, lwd = 3, col = "red", lty = 2)
vecMrk <- which(vecMrkComb[,2] == mrk)[2]
yX_vecMrk <- yX[which(yX$VectorID == vecMrkComb[vecMrk,1] & yX$CellMarker == vecMrkComb[vecMrk,2]),]
x <- yX_vecMrk$TimePoint
y.pred <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept", "af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)])
y.pred.sd <- apply(matrix(1:nrow(AF.mats$H.pred)), 1, function(r){
sqrt(res.FMA$s2_MLE * as.numeric((AF.mats$H.pred[r,]%*%AF.mats$AT) %*% solve(t(AF.mats$H.pred%*%AF.mats$AT)%*%(AF.mats$H.pred%*%AF.mats$AT)) %*% t(AF.mats$H.pred[r,]%*%AF.mats$AT))) * q.t
})[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)]
y.pred.sd.minus <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)] - y.pred.sd)
y.pred.sd.plus <- exp((cbind(1, AF.mats$H.pred) %*% bdiag(1, AF.mats$AT) %*% b_MLE[names(b_MLE) %in% c("intercept","af")])[((vecMrk - 1)*100 + 1):((vecMrk - 1)*100 + 100)] + y.pred.sd)
points(yX_vecMrk$TimePoint, yX_vecMrk$h.idx.res,
pch = 17, col = alpha("blue", .5), cex = 2)
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred, lwd = 3, col = "blue")
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred.sd.minus, lwd = 3, col = "blue", lty = 2)
lines(x = seq(min(x), max(x), length.out = 100),
y = y.pred.sd.plus, lwd = 3, col = "blue", lty = 2)
fig_label(mrk_lab[mrk], region="figure", pos="topleft", cex = 3, font = 2)
}
dev.off()
## Fit standard LM:
fit <- lm(formula = "log(h.idx) ~ bs(x = TimePoint, knots = quantile(TimePoint, probs = c(.33,.66)), degree = 2)*VectorID*CellMarker", data = yX)
mrks <- as.vector(unique(yX$CellMarker))
vcts <- as.vector(unique(yX$VectorID))
newdat_all <- do.call(rbind,lapply(mrks, function(mrk){
do.call(rbind, lapply(vcts, function(vct){
return(data.frame(TimePoint = seq(min(yX[which(yX$CellMarker == mrk & yX$VectorID == vct),]$TimePoint),
max(yX[which(yX$CellMarker == mrk & yX$VectorID == vct),]$TimePoint), length.out = 100),
CellMarker = mrk,
VectorID = vct))
}))
}))
conf_interval_all <- exp(predict(fit,
newdata=newdat_all,
interval="confidence",
level = 0.95))
## Plot results of standard LM:
pdf(file = paste(currFigPath, "standardLM.pdf", sep = ""), width = 12, height = 8)
par(mar = c(5,5,2,2), mfrow = c(2,2))
for (mrk in unique(yX$CellMarker)) {
yX_mrk <- yX[which(yX$CellMarker == mrk),]
yX_mrk_vID <- yX[which(yX$CellMarker == mrk & yX$VectorID == "LV.SF.LTR"),]
newdat = data.frame(TimePoint = seq(min(yX_mrk_vID$TimePoint), max(yX_mrk_vID$TimePoint), length.out = 100),
CellMarker = mrk,
VectorID = "LV.SF.LTR")
newdat$pred = exp(predict(fit, newdata = newdat))
conf_interval <- exp(predict(fit,
newdata=newdat,
interval="confidence",
level = 0.95))
plot(h.idx ~ TimePoint, data = yX_mrk_vID, cex = 2,
main = mrk, cex.main = 2,
pch = 19, cex.axis = 2, cex.lab = 2, col = alpha("red", .5),
xlim = range(yX$TimePoint),
ylim = range(yX_mrk$h.idx, conf_interval_all[,2:3]), xlab = "t", ylab = "h idx.")
with(newdat, lines(x = TimePoint, y = pred, col = "red", lwd = 3))
lines(newdat$TimePoint, conf_interval[,2], col="red", lty=2, lwd = 3)
lines(newdat$TimePoint, conf_interval[,3], col="red", lty=2, lwd = 3)
####
yX_mrk_vID <- yX[which(yX$CellMarker == mrk & yX$VectorID == "PGK"),]
newdat = data.frame(TimePoint = seq(min(yX_mrk_vID$TimePoint), max(yX_mrk_vID$TimePoint), length.out = 100),
CellMarker = mrk,
VectorID = "PGK")
newdat$pred = exp(predict(fit, newdata = newdat))
conf_interval <- exp(predict(fit,
newdata=newdat,
interval="confidence",
level = 0.95))
points(h.idx ~ TimePoint, data = yX_mrk_vID, cex = 2,
pch = 17, col = alpha("blue", .5))
with(newdat, lines(x = TimePoint, y = pred, col = "blue", lwd = 3))
lines(newdat$TimePoint, conf_interval[,2], col="blue", lty=2, lwd = 3)
lines(newdat$TimePoint, conf_interval[,3], col="blue", lty=2, lwd = 3)
fig_label(mrk_lab[mrk], region="figure", pos="topleft", cex = 3, font = 2)
}
dev.off()
## Plot legends:
pdf(file = paste(currFigPath, "vectorLegends.pdf", sep = ""), width = 16, height = 4)
par(mar = c(5,5,2,2), mfrow = c(2,2))
plot.new()
legend(x = "center", legend = c("PGK", "LTR"), col = c("blue", "red"), pch = c(17, 20), cex = 4, lwd = 7, lty = 1, horiz = T)
dev.off()
save.image("/storage/d4/workspace/LDC/SCS-MS/results/MS/20210510_1705/output/results.RData")
